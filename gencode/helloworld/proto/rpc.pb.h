// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2eproto;
namespace M {
class HelloReq;
struct HelloReqDefaultTypeInternal;
extern HelloReqDefaultTypeInternal _HelloReq_default_instance_;
class HelloRes;
struct HelloResDefaultTypeInternal;
extern HelloResDefaultTypeInternal _HelloRes_default_instance_;
class RpcHeader;
struct RpcHeaderDefaultTypeInternal;
extern RpcHeaderDefaultTypeInternal _RpcHeader_default_instance_;
}  // namespace M
PROTOBUF_NAMESPACE_OPEN
template<> ::M::HelloReq* Arena::CreateMaybeMessage<::M::HelloReq>(Arena*);
template<> ::M::HelloRes* Arena::CreateMaybeMessage<::M::HelloRes>(Arena*);
template<> ::M::RpcHeader* Arena::CreateMaybeMessage<::M::RpcHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace M {

enum RpcType : int {
  RPC_TYPE_RPC_REQUEST_UNSPECIFIED = 0,
  RPC_TYPE_RPC_REQUEST = 1,
  RPC_TYPE_RPC_RESPONSE = 2,
  RpcType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RpcType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RpcType_IsValid(int value);
constexpr RpcType RpcType_MIN = RPC_TYPE_RPC_REQUEST_UNSPECIFIED;
constexpr RpcType RpcType_MAX = RPC_TYPE_RPC_RESPONSE;
constexpr int RpcType_ARRAYSIZE = RpcType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcType_descriptor();
template<typename T>
inline const std::string& RpcType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RpcType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RpcType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RpcType_descriptor(), enum_t_value);
}
inline bool RpcType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RpcType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RpcType>(
    RpcType_descriptor(), name, value);
}
// ===================================================================

class RpcHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:M.RpcHeader) */ {
 public:
  inline RpcHeader() : RpcHeader(nullptr) {}
  ~RpcHeader() override;
  explicit PROTOBUF_CONSTEXPR RpcHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcHeader(const RpcHeader& from);
  RpcHeader(RpcHeader&& from) noexcept
    : RpcHeader() {
    *this = ::std::move(from);
  }

  inline RpcHeader& operator=(const RpcHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcHeader& operator=(RpcHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcHeader* internal_default_instance() {
    return reinterpret_cast<const RpcHeader*>(
               &_RpcHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcHeader& a, RpcHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "M.RpcHeader";
  }
  protected:
  explicit RpcHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFuncFieldNumber = 2,
    kTimeoutFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // optional string func = 2;
  bool has_func() const;
  private:
  bool _internal_has_func() const;
  public:
  void clear_func();
  const std::string& func() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_func(ArgT0&& arg0, ArgT... args);
  std::string* mutable_func();
  PROTOBUF_NODISCARD std::string* release_func();
  void set_allocated_func(std::string* func);
  private:
  const std::string& _internal_func() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_func(const std::string& value);
  std::string* _internal_mutable_func();
  public:

  // optional string timeout = 3;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  const std::string& timeout() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timeout(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timeout();
  PROTOBUF_NODISCARD std::string* release_timeout();
  void set_allocated_timeout(std::string* timeout);
  private:
  const std::string& _internal_timeout() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timeout(const std::string& value);
  std::string* _internal_mutable_timeout();
  public:

  // optional .M.RpcType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::M::RpcType type() const;
  void set_type(::M::RpcType value);
  private:
  ::M::RpcType _internal_type() const;
  void _internal_set_type(::M::RpcType value);
  public:

  // @@protoc_insertion_point(class_scope:M.RpcHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr func_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timeout_;
  int type_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class HelloReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:M.HelloReq) */ {
 public:
  inline HelloReq() : HelloReq(nullptr) {}
  ~HelloReq() override;
  explicit PROTOBUF_CONSTEXPR HelloReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloReq(const HelloReq& from);
  HelloReq(HelloReq&& from) noexcept
    : HelloReq() {
    *this = ::std::move(from);
  }

  inline HelloReq& operator=(const HelloReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloReq& operator=(HelloReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloReq* internal_default_instance() {
    return reinterpret_cast<const HelloReq*>(
               &_HelloReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HelloReq& a, HelloReq& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HelloReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "M.HelloReq";
  }
  protected:
  explicit HelloReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:M.HelloReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class HelloRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:M.HelloRes) */ {
 public:
  inline HelloRes() : HelloRes(nullptr) {}
  ~HelloRes() override;
  explicit PROTOBUF_CONSTEXPR HelloRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloRes(const HelloRes& from);
  HelloRes(HelloRes&& from) noexcept
    : HelloRes() {
    *this = ::std::move(from);
  }

  inline HelloRes& operator=(const HelloRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloRes& operator=(HelloRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloRes* internal_default_instance() {
    return reinterpret_cast<const HelloRes*>(
               &_HelloRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HelloRes& a, HelloRes& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HelloRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "M.HelloRes";
  }
  protected:
  explicit HelloRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:M.HelloRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_rpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcHeader

// optional .M.RpcType type = 1;
inline bool RpcHeader::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RpcHeader::has_type() const {
  return _internal_has_type();
}
inline void RpcHeader::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::M::RpcType RpcHeader::_internal_type() const {
  return static_cast< ::M::RpcType >(type_);
}
inline ::M::RpcType RpcHeader::type() const {
  // @@protoc_insertion_point(field_get:M.RpcHeader.type)
  return _internal_type();
}
inline void RpcHeader::_internal_set_type(::M::RpcType value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void RpcHeader::set_type(::M::RpcType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:M.RpcHeader.type)
}

// optional string func = 2;
inline bool RpcHeader::_internal_has_func() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RpcHeader::has_func() const {
  return _internal_has_func();
}
inline void RpcHeader::clear_func() {
  func_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcHeader::func() const {
  // @@protoc_insertion_point(field_get:M.RpcHeader.func)
  return _internal_func();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcHeader::set_func(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 func_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:M.RpcHeader.func)
}
inline std::string* RpcHeader::mutable_func() {
  std::string* _s = _internal_mutable_func();
  // @@protoc_insertion_point(field_mutable:M.RpcHeader.func)
  return _s;
}
inline const std::string& RpcHeader::_internal_func() const {
  return func_.Get();
}
inline void RpcHeader::_internal_set_func(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  func_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcHeader::_internal_mutable_func() {
  _has_bits_[0] |= 0x00000001u;
  return func_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcHeader::release_func() {
  // @@protoc_insertion_point(field_release:M.RpcHeader.func)
  if (!_internal_has_func()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = func_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (func_.IsDefault()) {
    func_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcHeader::set_allocated_func(std::string* func) {
  if (func != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  func_.SetAllocated(func, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (func_.IsDefault()) {
    func_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:M.RpcHeader.func)
}

// optional string timeout = 3;
inline bool RpcHeader::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RpcHeader::has_timeout() const {
  return _internal_has_timeout();
}
inline void RpcHeader::clear_timeout() {
  timeout_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RpcHeader::timeout() const {
  // @@protoc_insertion_point(field_get:M.RpcHeader.timeout)
  return _internal_timeout();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcHeader::set_timeout(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 timeout_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:M.RpcHeader.timeout)
}
inline std::string* RpcHeader::mutable_timeout() {
  std::string* _s = _internal_mutable_timeout();
  // @@protoc_insertion_point(field_mutable:M.RpcHeader.timeout)
  return _s;
}
inline const std::string& RpcHeader::_internal_timeout() const {
  return timeout_.Get();
}
inline void RpcHeader::_internal_set_timeout(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  timeout_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcHeader::_internal_mutable_timeout() {
  _has_bits_[0] |= 0x00000002u;
  return timeout_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcHeader::release_timeout() {
  // @@protoc_insertion_point(field_release:M.RpcHeader.timeout)
  if (!_internal_has_timeout()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = timeout_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (timeout_.IsDefault()) {
    timeout_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcHeader::set_allocated_timeout(std::string* timeout) {
  if (timeout != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  timeout_.SetAllocated(timeout, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (timeout_.IsDefault()) {
    timeout_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:M.RpcHeader.timeout)
}

// -------------------------------------------------------------------

// HelloReq

// optional string name = 1;
inline bool HelloReq::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HelloReq::has_name() const {
  return _internal_has_name();
}
inline void HelloReq::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HelloReq::name() const {
  // @@protoc_insertion_point(field_get:M.HelloReq.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HelloReq::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:M.HelloReq.name)
}
inline std::string* HelloReq::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:M.HelloReq.name)
  return _s;
}
inline const std::string& HelloReq::_internal_name() const {
  return name_.Get();
}
inline void HelloReq::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloReq::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* HelloReq::release_name() {
  // @@protoc_insertion_point(field_release:M.HelloReq.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HelloReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:M.HelloReq.name)
}

// -------------------------------------------------------------------

// HelloRes

// optional string name = 1;
inline bool HelloRes::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HelloRes::has_name() const {
  return _internal_has_name();
}
inline void HelloRes::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HelloRes::name() const {
  // @@protoc_insertion_point(field_get:M.HelloRes.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HelloRes::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:M.HelloRes.name)
}
inline std::string* HelloRes::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:M.HelloRes.name)
  return _s;
}
inline const std::string& HelloRes::_internal_name() const {
  return name_.Get();
}
inline void HelloRes::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloRes::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* HelloRes::release_name() {
  // @@protoc_insertion_point(field_release:M.HelloRes.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HelloRes::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:M.HelloRes.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace M

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::M::RpcType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::M::RpcType>() {
  return ::M::RpcType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
